"""
# Простое число, болшее 1 делится только на себя и на 1. Например 3, 5, 7
# Однако данный алгоритм можно оптимизировать, если заметить, что у любого составного числа есть собственный (то есть не равный 1) делитель, не превосходящий квадратного корня из числа.

Потом можно прдположить, что если только число не равно 2, то оно может быть простым, если только не делится на 2 и перебирать только нечетные числа и учитывать, что если нет чу составного числа делитель это число меньшее корня из числа
"""
def isPrime(n):
    if n % 2 == 0:
        if n == 2: return 'Prime'
        return 'Not prime'
    if n == 1: return 'Not prime'  # Единица не является простым числом
    d = 3
    while d ** 2 <= n and n % d != 0:
        d += 2
    if d ** 2 > n:
        return 'Prime'
    return 'Not prime'

T = int(input())  #В первой строке число тестовых случаев
for _ in range(T):
    n = int(input())
    print(isPrime(n))
